#!/bin/sh
#
# Name:        Program 1 - stats
# Author:      Scott Milton
# Date:        4/13/15
# Description: This shell script will... 
#
# general format for command is
# stats {-rows | cols} [input_file]

valid=1

# validate args and disqualify anything invalid
# case command has too few args
if [ "$#" -lt 1 ]
then
  valid=0 
# case command has too many args
elif [ "$#" -gt 2 ]
then
  valid=0
# case first command is not string that begins with lower case '-c' or '-r'
# I found help here:
# stackoverflow.com/questions/8928224/trying-to-retrieve-first-5-characters-from-string-in-bash-error
else
#  first_arg="$1"
  first_chars=${1:0:2}
  if [ $first_chars != '-c' ]
  then 
    valid=0
  fi
fi

echo "first_chars = $first_chars"

# if args were invalid, send error message to standard error and exit
if [ $valid == 0 ]
then
  printf '\nUsage: stats {-rows|-cols} [file]\n'
  exit 1
fi

# output the number of args entered by the user - just for testing here
echo $#

# case arg has incorrect format
# case file specified, but not readable


# open file if name given

# temporary dummy variable to be replaced by command line option (rows or cols)
option='r'

# get process id for this program
# TMP=ps$$

# set up trap to catch interrupt, hangup, and terminate signals and remove
# the temp file if program terminates unexpectedly (from intro to linux lecture)
trap "rm -f $TMP_$$; exit 1" INT HUP TERM

# cat < file

# prompt user for input
echo -e '\nEnter any number of integers separated by spaces.'
echo 'Push <ctrl> + d when finished.'

# get user input and store it in temp file with process id in name
# I found help here:
# stackoverflow.com/questions/10568473/redirect-bash-output-to-dynamic-file-name
cat > $TMP_$$

# output contents of temp file to stdout, followed by a newline
echo -e '\n'
cat $TMP_$$

if [ $option == 'r' ]
then
  printf '\nAverage Median'
elif [ $option == 'c' ]
then
  printf '\nAverages:'
  printf 'Medians:\n'
fi

printf '\n'

# remove the temp file and exit normally
rm -f $TMP_$$
exit 0
